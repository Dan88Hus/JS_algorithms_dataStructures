all sorting algorithms area based on comparison sorts 
sorting is the process of an rearranging the items in a collection (e.g. an arrray)
so that the items are in some kind of order 
 examplees
 sorting number from smallest to largest 
JS has built in .sort method but it doesnot work always the way oyu expect 

buble sort
    sorting algorithm where the largest values buble up to the top 
    iki rakami karsilastiriyoruz ve swap ediyoruz return degerine gore 
    start looping from with a variable v=called i the end of the array towards the beginning 
    start an inner loop with a variable called j from the beginning until i-1 
    if arr[j] is greater thatn arr[j+1] swap two values
    return the sorted array
    O(nSquare) generally , if array is mostly sorted dered its linear time 

selection sort 
    similar to buble sort, but instead of first placing large values into sorted position,
    it places small values into sorted position
    ilk bir degeri sabit tutar digeri ile karsilastirir daha yeni deger kucuksek yeni min olur ve swap yapar 
    store the first element as the smallest value you have seen so far 
    compare this item to the next item in the aray until you find a smaller number 
    if a smaller number is found designate that smaller number to .
    if the minimum is not the value(index) you initially began with, swap the two values 
    repeat this with the next element until the array is sorted 
    O(nSquare) 
insertion sort 
burda swap yapmiyoruz baska bir variable deger atamasi yapip onla karsilatiriyoruz 
    pretty similar to buble sort 
    builds up the sort by gradually creating a larger left half which is always sorted 
    hatirliyor yerleri ve sonrakini gerekli yere aliyor solda ki ne gore 
        onceki degerlerini check ederek 
    start by picking the second element in the array 
    now compare the second element with the one before it and swap if neccessary 
    continue to the next element and if it is in the incorrect order, iterate through the sorted portion
    (i.e. the left side) to place the element in the correct place 
    repeat it until the array is sorted and return the array 
    o(nSquare) in worst cases 
comparison of selection/insertion/buble sort 
    screenshot 
    buble sort, selection sort, insertion sort are all roughly equivalent 
    all have average time complexities that are quadratic 
    we can do better.. but we need more complex algorithms 
intermediate sorting algorithms
faster sorts (these family sorting algorthims that can improve time complexity from o(nSquare) to O(nLogn))
from o(nSquare) to o(nlogn) 
trade off between efficiency and simplicity

    merge sort
        its a combination of 2 things - merginf and sorting 
        we dividing array to split up hal half and half then we merge them together 
        by comparing left to right on each smaller array then merge 
        create an empty array, take aloot at the smallest values in each input array 
        while there are still values we havenot looked at...
            if the value in the first array is smaller than the value in the second array,
            push the value in the first array into our results and move on to the next value in the first array 
            if the value in the first array is larger than the value in the second array, push the value in the second array into our results and move on the next value in the second array 
            once we exhaust one array, push in all remaining values from the other array 
        -----------
        break up the array into halves until you have arrays that are empty or have one element 
        once you have smaller sorted arrays, merge those arrays with other sorted arrays until you are back at the full length of the array 
        once the array has been back together return the merged(and sorted) array

    quick sort
        like merge short, exploits the fact that arrays of 0 or 1 elements are always sorted 
        works by selecting one element(called pivot) and finding the index where the pivot should end up in the sorted array
        once the pivot is positioned appropriately, quick sort can be applied on either side of the pivot 
        ---
        pivot helper
        in order to implement merge sort, it is useful to first implement a function 
        responsible arranging elements in an array on either side of a pivot 
        given an array,  this helper function should designate an element as the pivot 
        it should then rearrange elements in the array so that all values less than the pivot are moved to the left of the pivot, and all values greater than the pivot 
        are moved to the right of the pivot 
        the order of elements on either side of the pivot doesnot matter
        the helper should do this in place that is it should not create new array 
        when complete the helper should return the index of the pivot 
        picking pivot 
        the runtime of quick sort depends in part on how one selects the pivot 
        ideally the pivot should be chosen so that its roughly the median value in the data set you are sorting 
        -----
        it will help to accept three arguments: an array, a start indexx, and an end index(these can default to 0 and the array length minus 1 , respectively)
        grab the pivot from the start of the array
        store the current pivot index in a variable (this will keep track of where the pivot should end up)
        loop through the array from the start until the end 
            if the pivot is greater than the current element increment the pivot index variable and then swap the current element with the element at the pivot index 
        swap the starting element with the pivot index 
        return the pivot index 
        -----
        call the pivot helper on the array 
        when the helper returns to you the updated pivot index recursively call the pivot helper on the subarray to the left of that index and the 
            subarray to the right of that index 
        your base case occurs when you consider a subarray with less than 2 elements 
        O(logn)
        o(n) for comparison per decomposotion 
    radix sort 
        we dont make direct compare datas
        is sort is a special sorting algorithm that works on lists of numbers
        it never makes comparisons between elements 
        it exploits the fact that information about the size of a number is encoded in the number of digits
        more digits means a bigger number, not comparing numbers 
        birler basamagindaki rakama gore ayristirilir, mesela kovalara ilk basamak numarlarina gore ayrilir daha sonra tek array gibi yan yana getirilir
        arkasindan tekrar kovalara gore ayristirma yapilir ama busefer onlar basamagina gore ayristilirir , boylelikle sortin kendiliginden gerceklesir 
        integer sorting, not float numbers 
        in order to implement radix sort it is helpful to build a few helper functions first
        getDigit(num,place) - returns the digit in num at given place value 
        7323 orneginde getDigit(7323,2) olur cunku sondan 0,1,2
        ----
        radix sort helpers
        in order to implement radix sort, it is helpful to build a few helper functions first:
        we need to know how many digits we have in largest number 
        1st method: digitCount(num)-returns the number of digits in num 
        2nd method: mostDigits(nums) - given an array of numbers, returns the number of digits in the largest numbers in the list 
        ------
        define a function that accepts list of numbers 
        figure out how many digits the largest number has 
        loop from k=0 up to theis largest number of digits 
        for each iteration of the loop: 
            create buckets for each digit (0 to 9)
            place each number in the corresponding bucket based on kth digit 
        replace our existing array with values in our buckets starting with 0 and going up to 9 
        return list at the end 
        
