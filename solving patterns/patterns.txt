1. devise a plan for solving problems
2. master common problem solving patterns 

some patterns Big O notation icin, nested loop yapmamaya calisiyoruz
    frequency counter 
        this pattern uses objects or sets to collect values/frequencies of values 
        this can often avoid the need for nested loops or o(nSquare)
    multiple pointers 
        creating pointers or values that correspond to an index or position and move towards the beginning, and or middle based on a certain condition
        very efficient for solving problems with minimal space complexity as well 

    sliding window o(n) -its much better way
        this pattern involves creating a window which can either be an array or number from one position to another
        depending on a certain condition, the window either increases or closes (and a new window is created)
        very useful for keeping track of a subset of data in an array/string etc.

    divide and conquer 
        this pattern involves dividing a data set into smaller chunks and then repeating a process with a subset of data.
        this pattern can tremendously decrease time complexity 
        binary search gibi orta degeri seciyor buyuk kucuk olma durumuna gore saga sola gidiyor 
        log(N)
    dynamic programming 
    greedy algorithms 
    backtracking
    ......many more

