22-160
trees - binary trees and binary search trees 
companre and contrast trees and lists 

trees is a data structure that consist of nodes in a parent/child relationship

lists - linear
trees - nonlinear 
tree terminology 
    root - the top node in a tree 
    child - a node directly connected to another node 
        when moving away from the root 
    parent - the converse notion of child 
    siblings - a group of nodes with the same parent 
    leaf - a node with no children 
    edge - the connection betweeen one node and another 

lots of different applications 
    html DOM 
    network routing 
    abstract syntax tree 
    artificial intelligence/ML 
    folders in operating systems 
    JSON

kind of trees - many variaties 
    heaps for example\
    polygon 
    triangle
    binary tree - each node can have at most 2 child / root cannot have 3 child 
    binary search trees - stores data that can be sortable (ordering)
        every parent node has at most 2 children 
        every node to the left of a parent node is always LESS than the parent \
        every node to the right of a parent node is ALWAYS GREATER than the parent 
BST
insering steps - iteratively or Recursively 
create a new node
starting at the root 
    check if there us a root, if not-the root now becomes that new node 
    if there is root, check if the value of the new node is greater than or less than the value of the root 
    if it is greater 
        check to see if there is a node to the right 
            if there is, move to that node and repeat these steps 
            if there is not, add that node as the right property 
    if it is less   
        check to see if there is a node to the left 
            if there is, move to taht node and repeat these steps 
            if there is not, add that node as the left property 
BST
finding - iteratively or recursively 
starting at the root 
check if there is a root, if not-we are done searching ]if there is a root, check if the value of the new node is the value we are looking for 
    if we found it we are done 
if not , check to see if the value is greater than or less than the value of the root 
if its greater
    check to see if there is a node to the right 
        if there is move to tahat node and repeat these steps 
        if there is not we aer done searching 
if it is less
    check to see if there is a node to the left 
        if there is move to that node and repeat these steps 
        if there is not, we are done searching 
        
