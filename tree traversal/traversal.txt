two ways for traversing a tree (visit node once, not visiting node again and again)
   breadth-first search = yatay gitmek (BFS) FIFO
   depth-first search   = dikey gitmek  (DFS)
BFS 
create a queue (this can be an array) and a variable to store the values of nodes visited 
place the root node in the queue
loop as long as there is anything in the queue  
    dequeue a node from the queue and push the value of the node into the variable that stores the nodes 
    if there is a left property on the node dequeued-add it to the queue 
    if there is a right property on the node dequeued-add it to the queue
return the variable that stores the values 

DFS - 3 different ordered
preorder
oncelikle solun en altina kadar iniyoruz DFS daha sonra sagina 
create a variable to store the values of nodes visited 
store the root of the BST in a variable called current 
write a hekper function which accepts a node 
    push the value of the node to the variable that stores the values 
    if the node has a left propertym call the helper function with the left property on the node 
    if the node has a right proprty, call the helper function with the right property on the node 
invoke the helper function with the current variable 
return the array of values 
177
